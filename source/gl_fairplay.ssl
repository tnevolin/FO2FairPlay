/*

FairPlay mod for fallout 2 by Bear
----------------------------------------

Requires sfall 4.3.0.2 +

*/


#include "ITEMPID.H"
#include "sfall.h"
#include "lib.math.h"
#include "lib.arrays.h"
#include "define_lite.h"
#include "define_extra.h"

#define NAME "gl_fairplay"
#define ndebug(message) debug_msg(NAME + ": " + message)

#define fo2tweaks_ini "mods\\fo2tweaks.ini"
#define sec_damage_mod_ammo_dr "damage_mod_ammo_dr"

variable fractionalAP = 0.0;
variable accumulatedFractionalAP = 0.0;
variable carryoverAP = 0;
variable ammoPids;

procedure handleCombatTurn;
procedure setFractionalAP;
procedure modifyAmmoACMod;
procedure handleUseObject;

procedure start begin
	if game_loaded then begin

		// hook combat turn

		register_hook_proc(HOOK_COMBATTURN, handleCombatTurn);

		// fractional AP

		call setFractionalAP();

		// ammo AC mod

		call modifyAmmoACMod;

		// armor

		// SP rate

		mod_skill_points_per_level(10 - get_pc_base_stat(STAT_iq));

		// books

		register_hook_proc(HOOK_USEOBJ, handleUseObject);

		ndebug("stats");
		ndebug(get_critter_base_stat(dude_obj, STAT_max_hp));
		ndebug(get_critter_extra_stat(dude_obj, STAT_max_hp));
		ndebug(get_critter_stat(dude_obj, STAT_max_hp));

	end
end

procedure handleCombatTurn begin
	variable stage = get_sfall_arg;
	variable critter = get_sfall_arg;

	// dude

	if (critter != dude_obj) then
		return;

	// turn begins

	if (stage == 1) then
		begin

			// add fractionalAP

			accumulatedFractionalAP += fractionalAP;
			variable wholeAccumulatedFractionalAP = floor(accumulatedFractionalAP);
			accumulatedFractionalAP -= wholeAccumulatedFractionalAP;

			set_critter_current_ap(critter, get_critter_current_ap(critter) + wholeAccumulatedFractionalAP);

			// add carryoverAP

			set_critter_current_ap(critter, get_critter_current_ap(critter) + carryoverAP);

		end

	// turn ends

	else if (stage == 0) then
		begin

			// set carryoverAP for next round

			carryoverAP = MIN(3, get_critter_current_ap(critter));

		end

	// combat ends

	else
		begin

			// reset fractionalAP

			fractionalAP = 0.0;

			// reset carryoverAP

			carryoverAP = 0;

		end

end

procedure setFractionalAP
begin

	ndebug("setFractionalAP");

	variable derivedStatsIniFile = get_ini_string("ddraw.ini|Misc|DerivedStats");
	if (strlen(derivedStatsIniFile) == 0) then
		return;

	variable baseAPMin = atoi(get_ini_string(derivedStatsIniFile + "|8|" + "min"));
	variable baseAPbase = atoi(get_ini_string(derivedStatsIniFile + "|8|" + "base"));

	variable product = 0.0;

	variable stat;
	for (stat = STAT_st; stat <= STAT_lu; stat++)
	begin

		variable shift = atoi(get_ini_string(derivedStatsIniFile + "|8|" + "shift" + stat));
		variable multi = atof(get_ini_string(derivedStatsIniFile + "|8|" + "multi" + stat));

		product += (get_critter_stat(dude_obj, stat) + shift) * multi;

	end

	variable value = max(baseAPMin, baseAPBase + product);

	fractionalAP = value - floor(value);

	ndebug("fractionalAP=" + fractionalAP);
	debug_msg("");

end

procedure modifyAmmoACMod begin

	ndebug("Ammo: set AC mod = 0");

	// cycle through pids for ammo

	variable pid;
	for (pid = 1; pid < 65535 and get_proto_data(pid, PROTO_IT_COST) != -1; pid++) begin

		// ammo

		if proto_data(pid, it_type) != item_type_ammo then
			continue;

		ndebug(proto_data(pid, it_name));

		// clear AC mod

		set_proto_data(pid, PROTO_AM_AC_MOD, 0);

	end

	debug_msg("");

end

procedure handleUseObject begin

	ndebug("handleUseObject");

	variable user = get_sfall_arg;
	variable object = get_sfall_arg;

	// dude uses book

	if (not (user == dude_obj and obj_type(object) == OBJ_TYPE_ITEM and obj_item_subtype(object) == item_type_misc_item)) then
		return;

	ndebug("book: " + obj_name(object));

	// get object pid

	variable pid = obj_pid(object);

	// populate book variables

	variable bookSkillMessages = temp_array_map;

	switch (pid) begin
		case PID_BIG_BOOK_OF_SCIENCE :
			begin
				bookSkillMessages[SKILL_SCIENCE] = mstr_proto(802);
				bookSkillMessages[SKILL_DOCTOR] = "You review scientific breakthrough in medicine.";
				bookSkillMessages[SKILL_GAMBLING] = "You memorize gambling algorithm.";
				bookSkillMessages[SKILL_CONVERSANT] = "You pick buzzwords to use in conversation.";
			end
		case PID_DEANS_ELECTRONICS :
			begin
				bookSkillMessages[SKILL_REPAIR] = mstr_proto(803);
				bookSkillMessages[SKILL_ENERGY_WEAPONS] = "You copy energy weapon circuits schematics.";
				bookSkillMessages[SKILL_LOCKPICK] = "You review electronic lock bypass method.";
				bookSkillMessages[SKILL_CONVERSANT] = "You pick buzzwords to use in conversation.";
			end
		case PID_FIRST_AID_BOOK :
			begin
				bookSkillMessages[SKILL_FIRST_AID] = mstr_proto(804);
				bookSkillMessages[SKILL_UNARMED_COMBAT] = "You learn stamina strengthening exercise.";
				bookSkillMessages[SKILL_MELEE] = "You study vulnerable body spots.";
				bookSkillMessages[SKILL_DOCTOR] = "You refresh your basic medical training skills.";
				bookSkillMessages[SKILL_CONVERSANT] = "You pick buzzwords to use in conversation.";
			end
		case PID_SCOUT_HANDBOOK :
			begin
				bookSkillMessages[SKILL_OUTDOORSMAN] = mstr_proto(806);
				bookSkillMessages[SKILL_UNARMED_COMBAT] = "You copy body building recipie.";
				bookSkillMessages[SKILL_MELEE] = "You learn few streat fight dirty tricks.";
				bookSkillMessages[SKILL_SNEAK] = "You refine you camouflage skill.";
				bookSkillMessages[SKILL_LOCKPICK] = "You practice picking crude mechanical locks.";
				bookSkillMessages[SKILL_STEAL] = "You learn tactical stealing.";
			end
		case PID_GUNS_AND_BULLETS :
			begin
				bookSkillMessages[SKILL_SMALL_GUNS] = mstr_proto(805);
				bookSkillMessages[SKILL_BIG_GUNS] = mstr_proto(805);
				bookSkillMessages[SKILL_ENERGY_WEAPONS] = mstr_proto(805);
				bookSkillMessages[SKILL_FIRST_AID] = "You study bullet wounds first aid.";
				bookSkillMessages[SKILL_CONVERSANT] = "You enrich your vocabulary with gun fight terms.";
			end
		case 635 /* Traps and Explosives */ :
			begin
				bookSkillMessages[SKILL_TRAPS] = mstr_proto(807);
				bookSkillMessages[SKILL_THROWING] = "You learn better grenades and explosives handling.";
				bookSkillMessages[SKILL_CONVERSANT] = "You enrich your vocabulary with trapping terms.";
			end
		case 636 /* Capital */ :
			begin
				bookSkillMessages[SKILL_BARTER] = mstr_proto(808);
				bookSkillMessages[SKILL_STEAL] = "You learn how to steal without breaking the law.";
				bookSkillMessages[SKILL_CONVERSANT] = "You enrich your vocabulary with economics terms.";
			end
		default :
			return;
	end

	// select target skill

	variable selectedSkill = -1, selectedSkillLevel;
	variable skill, message;
	foreach (skill : message in bookSkillMessages)
		begin
			ndebug(skill);
			variable skillLevel = get_critter_skill_points(dude_obj, skill);
			if (selectedSkill == -1 or skillLevel < selectedSkillLevel) then
				begin
					selectedSkill = skill;
					selectedSkillLevel = skillLevel;
				end
			ndebug(selectedSkill);
			ndebug(selectedSkillLevel);
		end

	// selected skill not found

	if (selectedSkill == -1) then
		return;

	// add to skill

	ndebug("skill: " + mstr_skill(100 + selectedSkill));

	// get additional skill points

	variable initalAdditionalSkillLevel = get_critter_skill_points(dude_obj, selectedSkill);
	variable additionalSkillLevel = initalAdditionalSkillLevel;

	ndebug("additionalSkillLevel (before): " + additionalSkillLevel);

	// compute skill progression

	variable remainedBookAvailableSkillPoints = 6;

	while (true) do
		begin

			variable skillLevelAdvancementCost = min(6, additionalSkillLevel / 25 + 1);

			ndebug(additionalSkillLevel);
			ndebug(skillLevelAdvancementCost);
			ndebug(remainedBookAvailableSkillPoints);
			if (remainedBookAvailableSkillPoints >= skillLevelAdvancementCost) then
				begin
					additionalSkillLevel++;
					remainedBookAvailableSkillPoints -= skillLevelAdvancementCost;
				end
			else
				break;

		end

	set_critter_skill_points(dude_obj, selectedSkill, additionalSkillLevel);
	set_available_skill_points(get_available_skill_points + remainedBookAvailableSkillPoints);

	ndebug("additionalSkillLevel (after ): " + additionalSkillLevel);
	ndebug("remainedBookAvailableSkillPoints: " + remainedBookAvailableSkillPoints);

	// display messages

	display_msg(bookSkillMessages[selectedSkill]);
	display_msg("[" + mstr_skill(100 + selectedSkill) + " +" + (additionalSkillLevel - initalAdditionalSkillLevel) + "/" + remainedBookAvailableSkillPoints + "]");

	set_sfall_return(1);

	debug_msg("");

end

